hist(choco$Rating, xlab = "Rating", main = "Distribution of Chocolate Ratings")
which.max(choco$Rating)
choco[87, 'Rating']
which.max(choco$Rating)
choco[87, 'Rating']
choco[choco$Rating == '5]
which.max(choco$Rating)
choco[87, 'Rating']
cities[cities$City=='Ames',]
choco[choco$Rating == '5']
choco[choco$Rating == '5',]
choco[87, 'Rating']
choco[choco$Rating == '5',]
smoothScatter(Cocoa.Pct, Rating)
smoothScatter("Cocoa.Pct", "Rating")
?smoothScatter
smoothScatter(choco$Cocoa.Pct, choco$Rating)
plot(choco$Cocoa.Pct, choco$Rating)
barplot(choco$Cocoa.Pct, choco$Rating)
cor(choco$Cocoa.Pct, choco$Rating)
?fctr
typeof(choco$Company.Location)
typeof(choco$Company.Location)
recent_rating = choco[choco$Review.Date>2011,]
unique(recent_rating$Company.Location) # NOTICE: how many countries are listed but how many levels are there?
unique(recent_rating$Company.Location) # NOTICE: how many countries are listed but how many levels are there?
recent_rating$Company.Location = droplevels(recent_rating$Company.Location)
unique(recent_rating$Company.Location) # NOTICE: how many countries are listed but how many levels are there?
recent_rating$Company.Location = droplevels(recent_rating$Company.Location)
head(recent_rating)
cross_table = table(recent_rating$Review.Date,recent_rating$Company.Location)
cross_table
head(recent_rating)
head(recent_rating)
which(cross_table[1,]!=0 & cross_table[2,]!=0 & cross_table[3,]!=0 & cross_table[4,]!=0 & cross_table[5,]!=0)
?which
france_recent = subset(recent_rating,Company.Location =='France')
uk_recent = subset(recent_rating,Company.Location =='U.K.')
germany_recent = subset(recent_rating,Company.Location=='Germany')
par(mfrow=c(2,2))
color1 = ifelse(france_recent$Rating >median(france_recent$Rating), 'blue', 'green')
plot(france_recent$Cocoa.Pct ~ france_recent$Review.Date,ylim=c(50,90),col=color1,pch=18,cex=1.5,xlab="Review Date", ylab= "Cocoa Percentage", main= "France")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('blue','green'),pch=18)
par(mfrow=c(2,2))
color1 = ifelse(france_recent$Rating >median(france_recent$Rating), 'blue', 'green')
plot(france_recent$Cocoa.Pct ~ france_recent$Review.Date,ylim=c(50,90),col=color1,pch=18,cex=1.5,xlab="Review Date", ylab= "Cocoa Percentage", main= "France")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('blue','green'),pch=18)
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('blue','green'),pch=18)
par(mfrow=c(2,2))
?par
france_recent = subset(recent_rating,Company.Location =='France')
recent_rating = choco[choco$Review.Date>2011,] #creates a grouping of ratings from 2011 to most recently
unique(recent_rating$Company.Location) # NOTICE: how many countries are listed but how many levels are there?
recent_rating$Company.Location = droplevels(recent_rating$Company.Location) # drops the extra levels
head(recent_rating) # displays the first 6 columns of the cleaned chocolate data
cross_table = table(recent_rating$Review.Date,recent_rating$Company.Location) # creates a cross table of the cleaned chocolate data by review year from 2011 to 201
cross_table # displays the cross table
```{r, eval=FALSE}
recent_rating = choco[choco$Review.Date>2011,] #creates a grouping of ratings from 2011 to most recently
recent_rating = choco[choco$Review.Date>2011,] #creates a grouping of ratings from 2011 to most recently
unique(recent_rating$Company.Location) # NOTICE: how many countries are listed but how many levels are there?
#There are 54 countries but 61 levels
# displays every unique country name in the data from 2011 to most recently
recent_rating$Company.Location = droplevels(recent_rating$Company.Location) # drops the extra levels
head(recent_rating) # displays the first 6 columns of the cleaned chocolate data
cross_table = table(recent_rating$Review.Date,recent_rating$Company.Location) # creates a cross table of the cleaned chocolate data with the number of reviews in a country by the review year from 2011 to 2017
cross_table # displays the cross table
which(cross_table[1,]!=0 & cross_table[2,]!=0 & cross_table[3,]!=0 & cross_table[4,]!=0 & cross_table[5,]!=0) # finds the countries that have at least one review per year from 2011 to 2017. Goes through each year and searches for countries who's values do not equal zero (cross_table[column number,]!=0)
france_recent = subset(recent_rating,Company.Location =='France') # creates a subset of reviews in France from 2011 to most recently
uk_recent = subset(recent_rating,Company.Location =='U.K.') # creates a subset of reviews in the UK from 2011 to most recently
germany_recent = subset(recent_rating,Company.Location=='Germany') # creates a subset of reviews in Germany from 2011 to most recently
par(mfrow=c(2,2))
color1 = ifelse(france_recent$Rating >median(france_recent$Rating), 'blue', 'green')
plot(france_recent$Cocoa.Pct ~ france_recent$Review.Date,ylim=c(50,90),col=color1,pch=18,cex=1.5,xlab="Review Date", ylab= "Cocoa Percentage", main= "France")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('blue','green'),pch=18)
color2 = ifelse(uk_recent$Rating >median(uk_recent$Rating), 'purple', 'red')
plot(uk_recent$Cocoa.Pct ~ uk_recent$Review.Date,ylim=c(50,90),col=color2,pch=18,cex=1.5, xlab="Review Date", ylab= "Cocoa Percentage", main= "UK")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('purple','red'),pch=18)
color3 = ifelse(germany_recent$Rating > median(germany_recent$Rating), 'orange', 'yellow')
plot(germany_recent$Cocoa.Pct ~ germany_recent$Review.Date,ylim=c(50,90),col=color3,pch=18,cex=1.5,xlab="Review Date", ylab= "Cocoa Percentage", main= "Germany")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('orange','yellow'),pch=18)
recent_rating = choco[choco$Review.Date>2011,] #creates a grouping of ratings from 2011 to most recently
unique(recent_rating$Company.Location) # NOTICE: how many countries are listed but how many levels are there?
#There are 54 countries but 61 levels
# displays every unique country name in the data from 2011 to most recently
recent_rating$Company.Location = droplevels(recent_rating$Company.Location) # drops the extra levels
head(recent_rating) # displays the first 6 columns of the cleaned chocolate data
cross_table = table(recent_rating$Review.Date,recent_rating$Company.Location) # creates a cross table of the cleaned chocolate data with the number of reviews in a country by the review year from 2011 to 2017
cross_table # displays the cross table
which(cross_table[1,]!=0 & cross_table[2,]!=0 & cross_table[3,]!=0 & cross_table[4,]!=0 & cross_table[5,]!=0) # finds the countries that have at least one review per year from 2011 to 2017. Goes through each year and searches for countries who's values do not equal zero (cross_table[column number,]!=0)
france_recent = subset(recent_rating,Company.Location =='France') # creates a subset of reviews in France from 2011 to most recently
uk_recent = subset(recent_rating,Company.Location =='U.K.') # creates a subset of reviews in the UK from 2011 to most recently
germany_recent = subset(recent_rating,Company.Location=='Germany') # creates a subset of reviews in Germany from 2011 to most recently
par(mfrow=c(2,2))
color1 = ifelse(france_recent$Rating >median(france_recent$Rating), 'blue', 'green')
plot(france_recent$Cocoa.Pct ~ france_recent$Review.Date,ylim=c(50,90),col=color1,pch=18,cex=1.5,xlab="Review Date", ylab= "Cocoa Percentage", main= "France")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('blue','green'),pch=18)
color2 = ifelse(uk_recent$Rating >median(uk_recent$Rating), 'purple', 'red')
plot(uk_recent$Cocoa.Pct ~ uk_recent$Review.Date,ylim=c(50,90),col=color2,pch=18,cex=1.5, xlab="Review Date", ylab= "Cocoa Percentage", main= "UK")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('purple','red'),pch=18)
color3 = ifelse(germany_recent$Rating > median(germany_recent$Rating), 'orange', 'yellow')
plot(germany_recent$Cocoa.Pct ~ germany_recent$Review.Date,ylim=c(50,90),col=color3,pch=18,cex=1.5,xlab="Review Date", ylab= "Cocoa Percentage", main= "Germany")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('orange','yellow'),pch=18)
```{r, eval=FALSE}
recent_rating = choco[choco$Review.Date>2011,] #creates a grouping of ratings from 2011 to most recently
unique(recent_rating$Company.Location) # NOTICE: how many countries are listed but how many levels are there?
#There are 54 countries but 61 levels
# displays every unique country name in the data from 2011 to most recently
recent_rating$Company.Location = droplevels(recent_rating$Company.Location) # drops the extra levels
head(recent_rating) # displays the first 6 columns of the cleaned chocolate data
cross_table = table(recent_rating$Review.Date,recent_rating$Company.Location) # creates a cross table of the cleaned chocolate data with the number of reviews in a country by the review year from 2011 to 2017
cross_table # displays the cross table
which(cross_table[1,]!=0 & cross_table[2,]!=0 & cross_table[3,]!=0 & cross_table[4,]!=0 & cross_table[5,]!=0) # finds the countries that have at least one review per year from 2011 to 2017. Goes through each year and searches for countries who's values do not equal zero (cross_table[column number,]!=0)
france_recent = subset(recent_rating,Company.Location =='France') # creates a subset of reviews in France from 2011 to most recently
uk_recent = subset(recent_rating,Company.Location =='U.K.') # creates a subset of reviews in the UK from 2011 to most recently
germany_recent = subset(recent_rating,Company.Location=='Germany') # creates a subset of reviews in Germany from 2011 to most recently
par(mfrow=c(2,2))
color1 = ifelse(france_recent$Rating >median(france_recent$Rating), 'blue', 'green')
plot(france_recent$Cocoa.Pct ~ france_recent$Review.Date,ylim=c(50,90),col=color1,pch=18,cex=1.5,xlab="Review Date", ylab= "Cocoa Percentage", main= "France")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('blue','green'),pch=18)
color2 = ifelse(uk_recent$Rating >median(uk_recent$Rating), 'purple', 'red')
plot(uk_recent$Cocoa.Pct ~ uk_recent$Review.Date,ylim=c(50,90),col=color2,pch=18,cex=1.5, xlab="Review Date", ylab= "Cocoa Percentage", main= "UK")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('purple','red'),pch=18)
color3 = ifelse(germany_recent$Rating > median(germany_recent$Rating), 'orange', 'yellow')
plot(germany_recent$Cocoa.Pct ~ germany_recent$Review.Date,ylim=c(50,90),col=color3,pch=18,cex=1.5,xlab="Review Date", ylab= "Cocoa Percentage", main= "Germany")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('orange','yellow'),pch=18)
```
hist?
?hist
?hist
cross_table = hist(recent_rating$Review.Date,recent_rating$Company.Location) # creates a cross table of the cleaned chocolate data with the number of reviews in a country by the review year from 2011 to 2017
cross_table # displays the cross table
which(cross_table[1,]!=0 & cross_table[2,]!=0 & cross_table[3,]!=0 & cross_table[4,]!=0 & cross_table[5,]!=0) # finds the countries that have at least one review per year from 2011 to 2017. Goes through each year and searches for countries who's values do not equal zero (cross_table[column number,]!=0)
france_recent = subset(recent_rating,Company.Location =='France') # creates a subset of reviews in France from 2011 to most recently
uk_recent = subset(recent_rating,Company.Location =='U.K.') # creates a subset of reviews in the UK from 2011 to most recently
germany_recent = subset(recent_rating,Company.Location=='Germany') # creates a subset of reviews in Germany from 2011 to most recently
par(mfrow=c(2,2))
color1 = ifelse(france_recent$Rating >median(france_recent$Rating), 'blue', 'green')
plot(france_recent$Cocoa.Pct ~ france_recent$Review.Date,ylim=c(50,90),col=color1,pch=18,cex=1.5,xlab="Review Date", ylab= "Cocoa Percentage", main= "France")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('blue','green'),pch=18)
color2 = ifelse(uk_recent$Rating >median(uk_recent$Rating), 'purple', 'red')
plot(uk_recent$Cocoa.Pct ~ uk_recent$Review.Date,ylim=c(50,90),col=color2,pch=18,cex=1.5, xlab="Review Date", ylab= "Cocoa Percentage", main= "UK")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('purple','red'),pch=18)
color3 = ifelse(germany_recent$Rating > median(germany_recent$Rating), 'orange', 'yellow')
plot(germany_recent$Cocoa.Pct ~ germany_recent$Review.Date,ylim=c(50,90),col=color3,pch=18,cex=1.5,xlab="Review Date", ylab= "Cocoa Percentage", main= "Germany")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('orange','yellow'),pch=18)
```
head(choco)
plot(choco$Rating,choco$Cocoa.Pct, xlab = "Ratings", ylab = "Cocoa Percentage", pch = 2, cex=2) # creates a plot with Ratings on x-axis and Cocoa Percentage of y-axis. The symbol of points is set to be a triangle (pch=2) and the size of the points is adjusted to be larger (cex=2).
plot(choco$Rating,choco$Review.Date, xlab = "Ratings", ylab = "Year", pch = 2, cex=2)
plot(choco$Review.Date,choco$Rating, xlab = "Year", ylab = "Rating", pch = 2)
cross_table
cross_table %>% group_by(choco%Review.Date) %>% tally()
cross_table %>% group_by(choco$Review.Date) %>% tally()
cross_table %>% group_by(choco$Review.Date)
number_reviews = subset(recent_rating,Review.Date)
count(recent_rating, c("Review Date", "Rating"))
library(plyr)
install.packages("plyr")
count(recent_rating, c("Review Date", "Rating"))
?COUNT::
?count
??count
aggregate(Review.Date ~ Rating, data = recent_rating, sum)
aggregate(Rating ~ Review.Date, data = recent_rating, sum)
recent_rating
library(plyr)
count(recent_rating, "Review.Date")
library(plyr)
number_reviews = count(recent_rating, "Review.Date")
hist(Review.Date, number_reviews)
hist(recent_rating$Review.Date, main="Number of Reviews per year from 2011 to 2017")
mean(number_reviews)
?median
median(number_reviews, na.rm = FALSE)
library(plyr)
number_reviews = count(recent_rating, "Review.Date") # summing the number of observations per year to double check the histogram
hist(recent_rating$Review.Date, main="Number of Reviews per year from 2011 to 2017")
library(plyr)
number_reviews = count(recent_rating, "Review.Date") # summing the number of observations per year to double check the histogram
hist(recent_rating$Review.Date, main="Number of Reviews per year from 2011 to 2017")
library(plyr)
number_reviews = count(recent_rating, "Review.Date") # summing the number of observations per year to double check the histogram
hist(recent_rating$Review.Date, main="Number of Reviews from 2011 to 2017")
```{r}
x = hist(recent_rating$Review.Date, main="Number of Reviews from 2011 to 2017")
recent_rating = choco[choco$Review.Date>2011,] #creates a grouping of ratings from 2011 to most recently
unique(recent_rating$Company.Location) # NOTICE: how many countries are listed but how many levels are there?
recent_rating$Company.Location = droplevels(recent_rating$Company.Location) # drops the extra levels
head(recent_rating) # displays the first 6 columns of the cleaned chocolate data
cross_table = table(recent_rating$Review.Date,recent_rating$Company.Location) # creates a cross table of the cleaned chocolate data with the number of reviews in a country by the review year from 2011 to 2017
cross_table # displays the cross table
cross_table # displays the cross table
which(cross_table[1,]!=0 & cross_table[2,]!=0 & cross_table[3,]!=0 & cross_table[4,]!=0 & cross_table[5,]!=0) # finds the countries that have at least one review per year from 2011 to 2017. Goes through each year and searches for countries who's values do not equal zero (cross_table[column number,]!=0)
which(cross_table[1,]!=0 & cross_table[2,]!=0 & cross_table[3,]!=0 & cross_table[4,]!=0 & cross_table[5,]!=0) # finds the countries that have at least one review per year from 2011 to 2017. Goes through each year and searches for countries who's values do not equal zero (cross_table[column number,]!=0)
france_recent = subset(recent_rating,Company.Location =='France') # creates a subset of reviews in France from 2011 to most recently
uk_recent = subset(recent_rating,Company.Location =='U.K.') # creates a subset of reviews in the UK from 2011 to most recently
germany_recent = subset(recent_rating,Company.Location=='Germany') # creates a subset of reviews in Germany from 2011 to most recently
par(mfrow=c(2,2))
color1 = ifelse(france_recent$Rating >median(france_recent$Rating), 'blue', 'green')
plot(france_recent$Cocoa.Pct ~ france_recent$Review.Date,ylim=c(50,90),col=color1,pch=18,cex=1.5,xlab="Review Date", ylab= "Cocoa Percentage", main= "France")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('blue','green'),pch=18)
color2 = ifelse(uk_recent$Rating >median(uk_recent$Rating), 'purple', 'red')
plot(uk_recent$Cocoa.Pct ~ uk_recent$Review.Date,ylim=c(50,90),col=color2,pch=18,cex=1.5, xlab="Review Date", ylab= "Cocoa Percentage", main= "UK")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('purple','red'),pch=18)
color3 = ifelse(germany_recent$Rating > median(germany_recent$Rating), 'orange', 'yellow')
plot(germany_recent$Cocoa.Pct ~ germany_recent$Review.Date,ylim=c(50,90),col=color3,pch=18,cex=1.5,xlab="Review Date", ylab= "Cocoa Percentage", main= "Germany")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('orange','yellow'),pch=18)
color3 = ifelse(germany_recent$Rating > median(germany_recent$Rating), 'orange', 'yellow')
plot(germany_recent$Cocoa.Pct ~ germany_recent$Review.Date,ylim=c(50,90),col=color3,pch=18,cex=1.5,xlab="Review Date", ylab= "Cocoa Percentage", main= "Germany")
legend('bottomright',legend=c('High Rating', 'Low Rating'),col=c('orange','yellow'),pch=18)
2. The plot can be improved by changing the y variable to the rating, and creating a legend where the data points are color coded by their cocoa percentage.
3. The number of ratings vary, with 2015 having the most reviews and 2017 having the least. The mean is around 201 reviews.
```{r}
x = hist(recent_rating$Review.Date, main="Number of Reviews from 2011 to 2017")
```
3. The number of ratings vary, with 2015 having the most reviews and 2017 having the least. The mean is around 201 reviews.
```{r}
x = hist(recent_rating$Review.Date, main="Number of Reviews from 2011 to 2017")
```
library(plyr)
recent_rating = choco[choco$Review.Date>2011,]
number_reviews = count(recent_rating, "Review.Date") # summing the number of observations per year to double check the histogram
x = hist(recent_rating$Review.Date, main="Number of Reviews from 2011 to 2017")
number_reviews = count(choco$recent_rating, "Review.Date") # summing the number of observations per year to double check the histogram
number_reviews = count(recent_rating, "Review.Date") # summing the number of observations per year to double check the histogram
x = hist(recent_rating$Review.Date, main="Number of Reviews from 2011 to 2017")
library(plyr)
recent_rating = choco[choco$Review.Date>2011,]
x = barplot(recent_rating$Review.Date, main="Number of Reviews from 2011 to 2017")
x = hist(recent_rating$Review.Date, main="Number of Reviews from 2011 to 2017")
library(plyr)
number_reviews = count(choco, "Review.Date") # summing the number of observations per year to double check the histogram
x = hist(recent_rating$Review.Date, main="Number of Reviews from 2011 to 2017")
number_reviews = count(choco, "Review.Date") # summing the number of observations per year to double check the histogram
library(plyr)
choco <- read.csv("https://raw.githubusercontent.com/lbchu/ds202_labs/master/choco.csv")
head(choco)
number_reviews = count(choco, "Review.Date") # summing the number of observations per year to double check the histogram
x = hist(recent_rating$Review.Date, main="Number of Reviews from 2011 to 2017")
x = hist(number_reviews, main="Number of Reviews from 2011 to 2017")
x = hist(choco$Review.Date, main="Number of Reviews from 2011 to 2017")
x = hist(choco$Review.Date>2011, main="Number of Reviews from 2011 to 2017")
recent_rating = choco[choco$Review.Date>2011,]
x = hist(recent_rating$Review.Date, main="Number of Reviews from 2011 to 2017")
x = hist(recent_rating$Review.Date, main="Number of Reviews from 2012 to 2017")
library(classdata)
library(ggplot2)
ggplot(data =fbiwide,aes(x =Burglary,y =Murder))+geom_point()
ggplot(data =fbiwide,aes(x =Burglary,y =Murder))
ggplot(data =fbiwide,aes(x =Burglary,y =Murder))+geom_point()
ggplot(fbi, aes(violent.crime, weight=Count))+ geom_bar() + facet_wrap(~Type)
ggplot(fbi, aes(Violent.crime, weight=Count))+ geom_bar() + facet_wrap(~Type)
ggplot(fbi, aes(Violent.crime, weight=Count), color=Type)+ geom_bar()
ggplot(fbi, aes(Violent.crime, weight=Count, color=Type)+ geom_bar()
?
ok
:wq
sdklsajkldjkfdlsajljlds
ggplot(fbi, aes(Violent.crime, weight=Count, color=Type)+ geom_bar()
ksda;jklfdj
ggplot(fbi,aes(reports,fill =cut))+geom_histogram(binwidth =3000,position='dodge')
ggplot(fbi,aes((Count),fill =cut))+geom_histogram(binwidth =3000,position='dodge')
ggplot(fbi,aes(Count))+geom_histogram(binwidth =20, scales='free_y')
ggplot(fbi, aes(x=weight)) + geom_histogram()
ggplot(fbi, aes(Violent.crime, weight=Count, color=Type))
library(classdata)
library(ggplot2)
ggplot(fbi, aes(Violent.crime, weight=Count, color=Type))
library(ggplot2)
ggplot(+ geom_bar())
ggplot(fbi, aes(Violent.crime, weight=Count, colour=Type))+ geom_bar())
library(classdata)
library(ggplot2)
ggplot(fbi, aes(Violent.crime, weight=Count, fill=Type))+ geom_bar())
ggplot(fbi, aes(Violent.crime, weight=Count, fill=Type))+ geom_bar()
ggplot(fbi, aes(Count)) +geom_histogram() +facet_wrap(~Type, scales = 'free_y')
library(ggplot2)
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = "blue"))
?aes
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = "red"))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = "yellow"))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = "blue"))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(x=displ, y = hwy, colour = "blue"))
install.packages("viridis")
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(x, y, colour = "blue"))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(xy, colour = "blue"))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(x, colour = "blue"))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = "blue"))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(color = "blue"))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(displ, hwy))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(displ, hwy, colour = "blue"))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = "blue", size= 2))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = "blue"))
ggplot2(mpg, aes(displ, hwy)) + geom_point(aes(colour = "blue"))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = "blue"))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = "#000099"))
ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = "blue"))
?colour
ggplot(mpg, aes(displ, hwy)) + geom_point(colour = "blue")
fbi$crime.rate.per.1000 = fbi$Count/ (fbi$Population/1000)
## load up R package classdata
library(classdata)
head(fbi)
str(fbi)
plot(recent_2017$crime.rate.per.1000)
fbi$crime.rate.per.1000 = fbi$Count/ (fbi$Population/1000)
str(fbi$crime.rate.per.1000)
summary(fbi$crime.rate.per.1000)
recent_2017 = fbi[which(fbi$Year==2017),]
plot(recent_2017$crime.rate.per.1000)
length(table(ab_avg$State))
allstates = names(table(fbi$State))
mystates = names(table(ab_avg$State))
index2 = allstates %in% mystates
allstates[index2==FALSE]
index2 = allstates %in% mystates
#install.packages("viridis")
library(viridis) # especially robust for color blindness
mycols = viridis(7)
dotchart(as.numeric(counts),names(counts),groups = grps, color = mycols[grps], pch = 18, cex=1.4, cex.label=2, lcolor= mycols[grps], main = "States grouped by number of crime types", xlab = "Number of Crime Types")
length(table(ab_avg$State))
allstates = names(table(fbi$State))
mystates = names(table(ab_avg$State))
index2 = allstates %in% mystates
allstates[index2==FALSE]
ggplot(fbi,aes(state,colour =cut))+geom_freqpoly(binwidth =3000)
head(classdata)
library(classdata)
head(classdata)
head(fbi)
ggplot(fbi,aes(State,colour =cut))+geom_freqpoly(binwidth =3000)
ggplot(fbi,aes(State))+geom_freqpoly(binwidth =3000)
ggplot(fbi,aes(Year))+geom_freqpoly(binwidth =3000)
ggplot(fbi,aes(Year))+geom_freqpoly(binwidth =1000)
ggplot(fbi,aes(Year))+geom_freqpoly(binwidth =200)
ggplot(fbi,aes(Year))+geom_freqpoly(binwidth =20)
?geom_freqpoly
ggplot(fbi,aes(Year))+geom_freqpoly(y = "Motor Vehicle Thefts", binwidth =20)
ggplot(fbi,aes(Year))+geom_freqpoly(y = fbi$Motor Vehicle Thefts, binwidth =20)
ggplot(fbi,aes(Year))+geom_freqpoly(y = fbi$MotorVehicleThefts, binwidth =20)
ggplot(fbi,aes(Year))+geom_freqpoly(y = fbi$Type, binwidth =20)
?geom_freqpoly
ggplot(fbi,aes(Year))+geom_freqpoly(binwidth =20, show.legend = NA)
ggplot(fbi,aes(Year))+geom_freqpoly(binwidth =20, show.legend)
ggplot(fbi,aes(Year))+geom_freqpoly(binwidth =20, show.legend = TRUE)
library(classdata)
ggplot(fbi, mapping = aes(x = Year, y = Motor Vehicle Theft))
library(classdata)
ggplot(fbi, aes(x = Year) + geom_line(color="gray70", aes(group = "California)) +
ggplot(fbi,aes(Year)) + geom_freqpoly(aes(color = Location, linetype = sex), binwidth =20, show.legend = TRUE) +  scale_color_manual(values = c("#999999", "#E69F00")
library(classdata)
ggplot(fbi,aes(Year)) + geom_freqpoly(aes(color = Location, linetype = sex), binwidth =20, show.legend = TRUE) +  scale_color_manual(values = c("#999999", "#E69F00")
library(classdata)
library(classdata)
ggplot(fbi,aes(Year)) + geom_freqpoly(aes(color = Location, linetype = sex), binwidth =20, show.legend = TRUE) +  scale_color_manual(values = c("#999999", "#E69F00")
ggplot(fbi,aes(Year)) + geom_freqpoly(aes(color = Location, linetype = State), binwidth =20, show.legend = TRUE) +
ggplot(fbi,aes(Year)) + geom_freqpoly(aes(color = Location, linetype = State), binwidth =20, show.legend = TRUE)
ggplot(fbi,aes(Year)) + geom_freqpoly(aes(color = fbi$Location, linetype = State), binwidth =20, show.legend = TRUE)
ggplot(fbi$Type,aes(Year)) + geom_freqpoly(aes(color = fbi$Location, linetype = State), binwidth =20, show.legend = TRUE)
ggplot(fbi,aes(Year)) + geom_freqpoly(aes(color = fbi$Location, linetype = State), binwidth =20, show.legend = TRUE)
```{r}
ggplot(fbi,aes(log(Count),Violent.crime)) + geom_boxplot() + coord_flip()
ggplot(mpg, aes(cty, hwy)) + geom_point()
head(diamonds)
ggplot(diamonds, aes(price)) + geom_histogram()
library(classdata)
fbic = subset(fbi, Type == 'Motor.vehicle.theft', select = c("State", "Year", "Count"))
fbic$Cal_test = (fbic$State != "California")
ggplot(fbic,aes(Year, Count, group = State)) + geom_line(aes(color = Cal_test) + labs(title = "Motor vehicle theft over time", x = "Year", y = "Motor Vehicle Thefts", colour= "States") +scale_color_hue(labels = c("California", "Rest of US"))
ggplot(fbic,aes(Year, Count, group = State)) + geom_line(aes(color = Cal_test) + labs(title = "Motor vehicle theft over time", x = "Year", y = "Motor Vehicle Thefts", colour= "States") +scale_color_hue(labels = c("California", "Rest of US")
library(classdata)
fbic = subset(fbi, Type == 'Motor.vehicle.theft', select = c("State", "Year", "Count"))
fbic$Cal_test = (fbic$State != "California")
ggplot(fbic, aes(Year, Count, group = State)) + geom_line(aes(color = Cal_test) + labs(title = "Motor vehicle theft over time", x = "Year", y = "Motor Vehicle Thefts", colour= "States") +scale_color_hue(labels = c("California", "Rest of US"))
library(classdata)
fbic = subset(fbi, Type == 'Motor.vehicle.theft', select = c("State", "Year", "Count"))
fbic$Cal_test = (fbic$State != "California")
ggplot(fbic, aes(Year, Count, group = State)) + geom_line(aes(color = Cal_test) + labs(title = "Motor vehicle theft over time", x = "Year", y = "Motor Vehicle Thefts", colour= "States") +scale_color_hue(labels = c("California", "Rest of US"))
fbic = subset(fbi, Type == 'Motor.vehicle.theft', select = c("State", "Year", "Count"))
fbic$Cal_test = (fbic$State != "California")
ggplot(fbic, aes(Year, Count, group = State)) + geom_line(aes(color = Cal_test) + labs(title = "Motor vehicle theft over time", x = "Year", y = "Motor Vehicle Thefts", colour= "States") +scale_color_hue(labels = c("California", "Rest of US"))
fbic = subset(fbi, Type == 'Motor.vehicle.theft', select = c("State", "Year", "Count"))
fbic$Cal_test = (fbic$State != "California")
ggplot(fbic, aes(Year, Count, group = State)) + geom_line(aes(color = Cal_test) + labs(title = "Motor vehicle theft over time", x = "Year", y = "Motor Vehicle Thefts", colour= "States") +scale_color_hue(labels = c("California", "Rest of US"))
fbic = subset(fbi, Type == 'Motor.vehicle.theft', select = c("State", "Year", "Count"))
fbic$Cal_test = (fbic$State != "California")
ggplot(fbic, aes(Year, Count, group = State)) + geom_line(aes(color = Cal_test) + labs(title = "Motor vehicle theft over time", x = "Year", y = "Motor Vehicle Thefts", colour= "States") + scale_color_hue(labels = c("California", "Rest of US"))
ggplot(fbic, aes(Year, Count, group = State)) + geom_line(aes(color = Cal_test)) + labs(title = "Motor vehicle theft over time", x = "Year", y = "Motor Vehicle Thefts", colour= "States") + scale_color_hue(labels = c("California", "Rest of US"))
library(ggmosaic)
install.packages(c("callr", "curl", "devtools", "digest", "DT", "ellipsis", "httpuv", "knitr", "pkgconfig", "tidyr", "tinytex"))
install.packages(c("callr", "curl", "devtools", "digest", "DT", "ellipsis", "httpuv", "knitr", "pkgconfig", "tidyr", "tinytex"))
install.packages(c("callr", "curl", "devtools", "digest", "DT", "ellipsis", "httpuv", "knitr", "pkgconfig", "tidyr", "tinytex"))
install.packages(c("callr", "curl", "devtools", "digest", "DT", "ellipsis", "httpuv", "knitr", "pkgconfig", "tidyr", "tinytex"))
install.packages(c("callr", "curl", "devtools", "digest", "DT", "ellipsis", "httpuv", "knitr", "pkgconfig", "tidyr", "tinytex"))
library(ggplot2)
install.packages("ggplot2")
ggmosaic
library(ggmosaic)
?aes
?geom_point
library(ggplot2)
?geom_point
library(classdata)
fbic = subset(fbi, Type == 'Motor.vehicle.theft', select = c("State", "Year", "Count"))
fbic$Cal_test = (fbic$State != "California")
ggplot(fbic, aes(Year, Count, group = State)) + geom_line(aes(color = Cal_test)) + labs(title = "Motor vehicle theft over time", x = "Year", y = "Motor Vehicle Thefts", colour= "States") + scale_color_hue(labels = c("California", "Rest of US"))
happy <- readRDS("HAPPY.rds")
getwd()
happy <- readRDS("HAPPY.rds")
happy <- readRDS("HAPPY.rds")
setwd("~/lab 3")
setwd("~/lab 3")
setwd("~/ds202_lab3")
happy <- readRDS("HAPPY.rds")
head(happy)
names(happy) = tolower(names(happy))
ggplot(diamonds,aes(depth))+geom_histogram(binwidth =0.1)+xlim(55,70)
ggplot(diamonds,aes(price))+geom_histogram(binwidth =0.1)+xlim(55,70)
ggplot(diamonds,aes(price))+geom_histogram(binwidth =0.1)
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 10)
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 1)
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.25)
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.2)
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.1)
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.01)
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.01) + xlim(0, 3.5)
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.01) + xlim(0, 3.25)
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.01) + xlim(0.2, 3.25)
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.01) + xlim(0.1, 3.25)
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.01) + xlim(0, 3.25)
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.01) + xlim(0, 3.2)
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.01) + xlim(0, 3.1)
head(diamonds)
ggplot(diamonds, aes(carat))+geom_point()
ggplot(diamonds, aes(carat))+geom_point(y = price)
ggplot(diamonds, aes(carat))+geom_point(y = 'price')
ggplot(diamonds, aes(x = carat, y = price))+geom_point()
ggplot(diamonds, aes(x = carat, y = price))+geom_point()geom_smooth()
ggplot(diamonds, aes(x = carat, y = price))+geom_point()+geom_smooth()
ggplot(diamonds, aes(x = carat, y = price))+geom_point(alpha = 0.5, size='.')+geom_smooth()
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(alpha = 0.5, size='.')+geom_smooth()
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(alpha = 0.5, size='.'))+geom_smooth()
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(alpha = 0.5, size='.')
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(size='.')
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(size='.'))
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(size=0.1))
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(size=0.01))
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(size=0.001))
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(size='.'))
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(alpha=0.5))
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(alpha=0.5))+ labs(title = "Price by Carats", x = "Price", y = "Carats")
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(alpha=0.5))+ labs(title = "Price by Carats", x = "Price", y = "Carats") +geom_smooth
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(alpha=0.5))+ labs(title = "Price by Carats", x = "Price", y = "Carats") +geom_smooth()
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(alpha=0.25))+ labs(title = "Price by Carats", x = "Price", y = "Carats") +geom_smooth()
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(alpha=0.25))+ labs(title = "Price by Carats", x = "Price", y = "Carats") +geom_smooth()
ggplot(diamonds,aes(depth))+geom_histogram(binwidth =0.1)+xlim(55,70)
ggplot(diamonds,aes(depth))+geom_histogram(binwidth =0.1)+xlim(55,75)
ggplot(diamonds,aes(depth))+geom_histogram(binwidth =0.1)+xlim(55,70)
head(diamonds)
ggplot(diamonds,aes(depth))+geom_histogram(binwidth =0.1)+xlim(55,70) +labs(title= "Distribution of depth")
ggplot(diamonds,aes(x=cut,y=price))+geom_point()
ggplot(diamonds, aes(x = cut, y = price))+geom_point(aes(alpha=0.25))+ labs(title = "Price by Cut", x = "Price", y = "Cut")
ggplot(diamonds, aes(x = cut, y = price))+ labs(title = "Price by Cut", x = "Price", y = "Cut")
ggplot(diamonds, aes(x = cut, y = price))+geom_point()+ labs(title = "Price by Cut", x = "Price", y = "Cut")
ggplot(diamonds, aes(x = clarity, y = price))+geom_point()+ labs(title = "Price by Clarity", x = "Price", y = "Clarity
")
ggplot(diamonds,aes(x=price, y = clarity))+geom_point(aes(color =class))+geom_smooth()+labs(title ="Price by Clarity",x ="Price",y ="Clarity")
ggplot(diamonds,aes(x=price, y = clarity))+geom_point()+geom_smooth()+labs(title ="Price by Clarity",x ="Price",y ="Clarity")
ggplot(diamonds,aes(x=price, y = clarity))+geom_point()+labs(title ="Price by Clarity",x ="Price",y ="Clarity")
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.01) + xlim(0, 3.1)
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(alpha=0.25))+ labs(title = "Price by Carats", x = "Price", y = "Carats") +geom_smooth()
ggplot(diamonds,aes(depth))+geom_histogram(binwidth =0.1)+xlim(55,70) +labs(title= "Distribution of depth")
ggplot(diamonds, aes(x = cut, y = price))+geom_point()+ labs(title = "Price by Cut", x = "Price", y = "Cut")
ggplot(diamonds,aes(x=price, y = clarity))+geom_point()+labs(title ="Price by Clarity",x ="Price",y ="Clarity")
ggplot(diamonds, aes(x = depth, y = price))+geom_point(aes(alpha=0.25))+ labs(title = "Price by Depth", x = "Price", y = "Depth") +geom_smooth()
ggplot(diamonds, aes(x = depth, y = price))+geom_point(aes(alpha=0.25))+ labs(title = "Price by Depth", x = "Price", y = "Depth")
ggplot(diamonds, aes(x = depth, y = price))+geom_point(aes(alpha=0.25))+ labs(title = "Price by Depth", x = "Depth", y = "Price")
ggplot(diamonds,aes(carat))+geom_histogram(binwidth = 0.01) + xlim(0, 3.1)
ggplot(diamonds, aes(x = carat, y = price))+geom_point(aes(alpha=0.25))+ labs(title = "Price by Carats", x = "Price", y = "Carats") +geom_smooth()
ggplot(diamonds,aes(depth))+geom_histogram(binwidth =0.1)+xlim(55,70) +labs(title= "Distribution of depth")
ggplot(diamonds, aes(x = depth, y = price))+geom_point(aes(alpha=0.25))+ labs(title = "Price by Depth", x = "Depth", y = "Price")
ggplot(diamonds, aes(x = cut, y = price))+geom_point()+ labs(title = "Price by Cut", x = "Price", y = "Cut")
ggplot(diamonds,aes(x=price, y = clarity))+geom_point()+labs(title ="Price by Clarity",x ="Price",y ="Clarity")
ggplot(diamonds,aes(price))+geom_histogram(binwidth = 0.01) + xlim(0, 3.1)
ggplot(diamonds,aes(price))+geom_histogram(binwidth = 0.01)
ggplot(diamonds,aes(price))+geom_histogram(binwidth = 0.1)
ggplot(diamonds,aes(price))+geom_histogram(binwidth = 1)
ggplot(fbi, aes(x = log(Count)), y = Violent.crime)) + geom_boxplot()+coord_flip()
ggplot(fbi, aes(x = log(Count), y = Violent.crime)) + geom_boxplot()+coord_flip()
ggplot(fbi,aes(log(Count),Violent.crime)) + geom_boxplot() + coord_flip()
```{r}
ggplot(fbi, aes(x = log(Count), y = Violent.crime)) + geom_boxplot()+coord_flip()
ggplot(fbi, aes(x = log(Count),Violent.crime)) + geom_boxplot()+coord_flip()
ggplot(fbi) + geom_boxplot(x = log(Count),y =Violent.crime))+coord_flip()
ggplot(fbi) + geom_boxplot(x = log(Count),y =Violent.crime)+coord_flip()
ggplot(fbi, log(Count)) + geom_boxplot(x = log(Count),y =Violent.crime)+coord_flip()
head(mpg)
ggplot(mpg, aes(cty, hwy)) + geom_smooth()
ggplot(mpg, aes(cty, hwy)) + geom_jitter()
oldcar = subset(mpg, Type == 'year', select = c("cty", "hwy"))
oldcar = subset(mpg, Type == 'year', select = c("cty", "hwy"))
ggplot(mpg, aes(cty, hwy)) + geom_point()
ggplot(mpg, aes(cty, hwy)) + geom_point() +
facet_grid(year~.)
ggplot(mpg, aes(cty,hwy)) +
geom_point(alpha = .4, position = position_jitter(width= .1,height = .1))
ggplot(fbi,aes(x = log(Count),y = Violent.crime)) + geom_boxplot() + coord_flip()
ggplot(data =fbi,mapping = (aes(x = log(Count),y = Violent.crime))) + geom_boxplot() + coord_flip()
ggplot(data =fbi,mapping = (aes(x = log(Count),y = Violent.crime))) + geom_boxplot() + coord_flip() +labs(title=Violent and Nonviolent Crime Counts)
ggplot(data =fbi,mapping = (aes(x = log(Count),y = Violent.crime))) + geom_boxplot() + coord_flip() +labs(title="Violent and Nonviolent Crime Counts")
ggplot(fbi,aes(x = log(Count),y = Violent.crime)) + geom_boxplot() + coord_flip() +labs(title="Violent and Nonviolent Crime Counts")
